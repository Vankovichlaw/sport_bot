import os
import json
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_FILE = "database.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    if os.path.exists(DB_FILE):
        with open(DB_FILE, "r") as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data):
    with open(DB_FILE, "w") as f:
        json.dump(data, f, indent=2)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_data(user_id):
    data = load_data()
    if str(user_id) not in data:
        data[str(user_id)] = {
            "goal": 0,
            "done": 0,
            "next_training": "–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞",
            "last_training": "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            "comment": "",
            "rewards": [],
            "sport": "–Ω–µ –≤—ã–±—Ä–∞–Ω"
        }
    return data

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_data(user_id, new_info):
    data = get_user_data(user_id)
    data[str(user_id)].update(new_info)
    save_data(data)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def format_status(user_id):
    data = get_user_data(user_id)[str(user_id)]
    goal = data["goal"]
    done = data["done"]
    reward = "üèÖ" if done >= goal and goal > 0 else ""
    return (
        f"<b>üéØ –¶–µ–ª—å –º–µ—Å—è—Ü–∞:</b> {done}/{goal} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ {reward}\n"
        f"<b>üìÖ –°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:</b> {data['next_training']}\n"
        f"<b>üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:</b> {data['last_training']}\n"
        f"<b>üèÉ‚Äç‚ôÇÔ∏è –í–∏–¥ —Å–ø–æ—Ä—Ç–∞:</b> {data['sport']}\n"
        f"<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {data['comment']}"
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"), KeyboardButton(text="‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
        [KeyboardButton(text="üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å"), KeyboardButton(text="üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
        [KeyboardButton(text="‚öôÔ∏è –í—ã–±—Ä–∞—Ç—å —Å–ø–æ—Ä—Ç"), KeyboardButton(text="üîÅ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë")],
        [KeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")]
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "<b>–ü—Ä–∏–≤–µ—Ç! –Ø —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –±–æ—Ç üí™</b>\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚ûï –î–æ–±–∞–≤–ª—è—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "‚úÖ –û—Ç–º–µ—á–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ\n"
        "üéØ –°—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å –Ω–∞ –º–µ—Å—è—Ü\n"
        "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "‚öôÔ∏è –í—ã–±–∏—Ä–∞—Ç—å –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞\n"
        "üîÅ –°–±—Ä–∞—Å—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ:",
        reply_markup=main_kb
    )

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏
@dp.message(F.text == "üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å")
async def set_goal(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å: —Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ?")
    dp.message.register_once(set_goal_value)

async def set_goal_value(message: Message):
    try:
        goal = int(message.text)
        update_user_data(message.from_user.id, {"goal": goal})
        await message.answer("–¶–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ\n\n" + format_status(message.from_user.id))
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@dp.message(F.text == "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def plan_next(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20 –∏—é–Ω—è):")
    dp.message.register_once(save_next_training)

async def save_next_training(message: Message):
    update_user_data(message.from_user.id, {"next_training": message.text})
    await message.answer("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ üìÖ\n\n" + format_status(message.from_user.id))

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def add_training(message: Message):
    user_id = message.from_user.id
    data = get_user_data(user_id)
    data[str(user_id)]["done"] += 1
    save_data(data)
    await message.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ üí™\n–ù–∞–ø–∏—à–∏, –∫–∞–∫ –ø—Ä–æ—à–ª–∞:")
    dp.message.register_once(save_comment)

async def save_comment(message: Message):
    update_user_data(message.from_user.id, {
        "comment": message.text,
        "last_training": datetime.now().strftime("%d %B %Y")
    })
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω üìù\n\n" + format_status(message.from_user.id))

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@dp.message(F.text == "‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def finish_training(message: Message):
    await message.answer("–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! üí•\n\n" + format_status(message.from_user.id))

# –í—ã–±–æ—Ä –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
@dp.message(F.text == "‚öôÔ∏è –í—ã–±—Ä–∞—Ç—å —Å–ø–æ—Ä—Ç")
async def choose_sport(message: Message):
    await message.answer("–ö–∞–∫–æ–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞? (–ù–∞–ø—Ä–∏–º–µ—Ä: –±–µ–≥, –π–æ–≥–∞, –∑–∞–ª)")
    dp.message.register_once(save_sport)

async def save_sport(message: Message):
    update_user_data(message.from_user.id, {"sport": message.text})
    await message.answer("–í–∏–¥ —Å–ø–æ—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ\n\n" + format_status(message.from_user.id))

# –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
@dp.message(F.text == "üîÅ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë")
async def reset_user(message: Message):
    data = load_data()
    if str(message.from_user.id) in data:
        del data[str(message.from_user.id)]
        save_data(data)
    await message.answer("–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã üîÅ")

# –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@dp.message(F.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress(message: Message):
    await message.answer(format_status(message.from_user.id))

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
