import logging
import json
from pathlib import Path
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
import os
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
DATA_FILE = Path("data.json")
if not DATA_FILE.exists():
    DATA_FILE.write_text(json.dumps({}))

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
logging.basicConfig(level=logging.INFO)

class Form(StatesGroup):
    waiting_for_comment = State()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
def load_data():
    return json.loads(DATA_FILE.read_text())

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
def save_data(data):
    DATA_FILE.write_text(json.dumps(data, indent=2))

# –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
def get_main_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="add_training")
    kb.button(text="üìÖ –°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="next_training")
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    kb.adjust(1)
    return kb.as_markup()

# –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å
def get_status(user_id):
    data = load_data()
    user = data.get(str(user_id), {})
    status = f"üéØ –¶–µ–ª—å: {user.get('goal', '–Ω–µ –∑–∞–¥–∞–Ω–∞')}\n"
    status += f"üìà –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {len(user.get('trainings', []))}\n"
    status += f"üìÖ –°–ª–µ–¥—É—é—â–∞—è: {user.get('next', '–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞')}\n"
    status += f"üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç: {user.get('last_comment', '‚Äî')}"
    return status

@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    kb = get_main_keyboard()
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n–í–æ—Ç —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å:\n\n{get_status(message.from_user.id)}", reply_markup=kb)
    await state.clear()

@dp.callback_query(F.data == "add_training")
async def add_training(callback, state: FSMContext):
    data = load_data()
    user_id = str(callback.from_user.id)
    user = data.setdefault(user_id, {"trainings": []})
    user["trainings"].append("‚úÖ")
    save_data(data)

    await callback.message.edit_text("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ\n\n–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –∫–∞–∫ –æ–Ω–∞ –ø—Ä–æ—à–ª–∞:", reply_markup=None)
    await state.set_state(Form.waiting_for_comment)
    await callback.answer()

@dp.message(Form.waiting_for_comment)
async def save_comment(message: Message, state: FSMContext):
    data = load_data()
    user_id = str(message.from_user.id)
    comment = message.text
    data.setdefault(user_id, {})["last_comment"] = comment
    save_data(data)

    await message.answer(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ\n\n–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å:\n\n{get_status(user_id)}", reply_markup=get_main_keyboard())
    await state.clear()

@dp.callback_query(F.data == "next_training")
async def set_next(callback, state: FSMContext):
    await callback.message.edit_text("–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 –∏—é–Ω—è):")
    await state.set_state("waiting_for_date")
    await callback.answer()

@dp.message(F.state == "waiting_for_date")
async def save_date(message: Message, state: FSMContext):
    data = load_data()
    user_id = str(message.from_user.id)
    data.setdefault(user_id, {})["next"] = message.text
    save_data(data)

    await message.answer(f"–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ\n\n–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å:\n\n{get_status(user_id)}", reply_markup=get_main_keyboard())
    await state.clear()

@dp.callback_query(F.data == "stats")
async def show_stats(callback, state: FSMContext):
    await callback.message.edit_text(f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n{get_status(callback.from_user.id)}", reply_markup=get_main_keyboard())
    await callback.answer()

@dp.message(Command("reset"))
async def reset_user(message: Message, state: FSMContext):
    data = load_data()
    user_id = str(message.from_user.id)
    if user_id in data:
        del data[user_id]
        save_data(data)
    await message.answer("–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã ‚ùå", reply_markup=get_main_keyboard())
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
