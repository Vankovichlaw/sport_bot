import asyncio
import os
import json
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from datetime import datetime, timedelta
from random import choice

# ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

DATA_FILE = "user_data.json"

# ============================ FSM ============================

class TrainingStates(StatesGroup):
    choosing_sport = State()
    setting_goal = State()
    setting_next_training = State()
    adding_comment = State()

# ============================ –ö–ù–û–ü–ö–ò ============================

main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
    [KeyboardButton(text="üìÖ –°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
    [KeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")]
], resize_keyboard=True)

# ============================ –•–†–ê–ù–ò–õ–ò–©–ï ============================

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

# ============================ –ú–û–¢–ò–í–ê–¶–ò–Ø ============================

quotes = [
    "üí™ –ö–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏!",
    "üî• –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Äî –≤–∫–ª–∞–¥ –≤ –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –ø–æ–±–µ–¥—É!",
    "üèÜ –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏!",
    "üöÄ –ù–µ —Å–¥–∞–≤–∞–π—Å—è, —Ç—ã —É–∂–µ –Ω–∞—á–∞–ª!",
    "‚è±Ô∏è –õ—É—á—à–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Äî —Ç–∞, —á—Ç–æ —Å–¥–µ–ª–∞–Ω–∞!"
]

# ============================ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê ============================

async def send_status(message: Message, user_data: dict):
    uid = str(message.from_user.id)
    u = user_data.get(uid, {})
    text = f"<b>üèãÔ∏è –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b>\n\n"
    text += f"üéØ –¶–µ–ª—å –º–µ—Å—è—Ü–∞: {u.get('goal', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üèÉ‚Äç‚ôÇÔ∏è –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {u.get('sport', '–Ω–µ –≤—ã–±—Ä–∞–Ω')}\n"
    text += f"üìÖ –°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {u.get('next_training', '–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞')}\n"
    text += f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {u.get('trainings', 0)}\n"
    text += f"üèÖ –ù–∞–≥—Ä–∞–¥—ã: {u.get('awards', 0)}\n"
    comment = u.get("last_comment")
    if comment:
        text += f"üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
    text += f"\nüß† {choice(quotes)}"
    await message.answer(text, reply_markup=main_kb)

# ============================ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ============================

@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏.\n\n–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è!")
    await message.answer("üí¨ –ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞? (–ù–∞–ø—Ä–∏–º–µ—Ä: –±–µ–≥, –π–æ–≥–∞, –∑–∞–ª)")
    await state.set_state(TrainingStates.choosing_sport)

@dp.message(TrainingStates.choosing_sport)
async def choose_sport(message: Message, state: FSMContext):
    uid = str(message.from_user.id)
    data = load_data()
    data.setdefault(uid, {})["sport"] = message.text
    save_data(data)
    await message.answer("üéØ –£–∫–∞–∂–∏ —Ü–µ–ª—å –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫):")
    await state.set_state(TrainingStates.setting_goal)

@dp.message(TrainingStates.setting_goal)
async def set_goal(message: Message, state: FSMContext):
    uid = str(message.from_user.id)
    data = load_data()
    data.setdefault(uid, {})["goal"] = message.text
    data[uid]["trainings"] = 0
    data[uid]["awards"] = 0
    save_data(data)
    await message.answer("üìÖ –ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-06-15)")
    await state.set_state(TrainingStates.setting_next_training)

@dp.message(TrainingStates.setting_next_training)
async def set_next_training(message: Message, state: FSMContext):
    uid = str(message.from_user.id)
    data = load_data()
    data.setdefault(uid, {})["next_training"] = message.text
    save_data(data)
    await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!")
    await send_status(message, data)
    await state.clear()

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def add_training(message: Message, state: FSMContext):
    uid = str(message.from_user.id)
    data = load_data()
    user = data.setdefault(uid, {})
    user["trainings"] = user.get("trainings", 0) + 1

    # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∫–∞–∂–¥—ã–µ 5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    if user["trainings"] % 5 == 0:
        user["awards"] = user.get("awards", 0) + 1
        await message.answer("üèÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø–æ–ª—É—á–∏–ª –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å!")

    save_data(data)
    await message.answer("üóíÔ∏è –ö–∞–∫ –ø—Ä–æ—à–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞? –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    await state.set_state(TrainingStates.adding_comment)

@dp.message(TrainingStates.adding_comment)
async def add_comment(message: Message, state: FSMContext):
    uid = str(message.from_user.id)
    data = load_data()
    data.setdefault(uid, {})["last_comment"] = message.text
    save_data(data)
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –í—Å—ë —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    await send_status(message, data)
    await state.clear()

@dp.message(F.text == "üìÖ –°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
async def show_next(message: Message):
    uid = str(message.from_user.id)
    data = load_data()
    next_training = data.get(uid, {}).get("next_training", "–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞")
    await message.answer(f"üìÖ –°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: <b>{next_training}</b>")

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats(message: Message):
    uid = str(message.from_user.id)
    data = load_data()
    u = data.get(uid, {})
    await message.answer(
        f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {u.get('trainings', 0)}\n"
        f"–¶–µ–ª—å: {u.get('goal', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"–ù–∞–≥—Ä–∞–¥—ã: {u.get('awards', 0)}"
    )

@dp.message(F.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")
async def reset_data(message: Message):
    uid = str(message.from_user.id)
    data = load_data()
    if uid in data:
        del data[uid]
        save_data(data)
    await message.answer("‚ôªÔ∏è –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

# ============================ –ó–ê–ü–£–°–ö ============================

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
